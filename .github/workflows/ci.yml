name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for git info
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: |
        echo "No linting configured yet"
        # npm run lint (when configured)
    
    - name: Run tests
      run: |
        echo "No tests configured yet"
        # npm test (when configured)
    
    - name: Build project
      run: npm run build
      env:
        CI: true
    
    - name: Verify build output
      run: |
        echo "Build completed successfully"
        ls -la dist/
        echo "Checking if commit info is in build..."
        if grep -q "Commit:" dist/assets/*.js; then
          echo "✓ Commit info found in build"
        else
          echo "⚠ Commit info might not be properly injected"
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7

  deploy-preview:
    name: Deploy Preview
    needs: build-and-test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
    
    - name: Deploy to preview environment
      run: |
        echo "Deploy preview for PR #${{ github.event.pull_request.number }}"
        # Add deployment steps here (e.g., Netlify, Vercel, etc.)

  deploy-production:
    name: Deploy to GitHub Pages
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for security vulnerabilities
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check bundle size
      run: |
        npm run build
        echo "Bundle Size Report:"
        echo "==================="
        du -sh dist/
        find dist -name "*.js" -o -name "*.css" | while read file; do
          size=$(du -h "$file" | cut -f1)
          echo "$file: $size"
        done
        
        # Check if bundle is too large
        js_size=$(find dist -name "*.js" -exec du -b {} + | awk '{sum += $1} END {print sum}')
        if [ "$js_size" -gt 524288 ]; then
          echo "⚠️ Warning: JavaScript bundle is larger than 512KB ($js_size bytes)"
        fi

  notify:
    name: Notify Status
    needs: [build-and-test, deploy-production]
    if: always() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ] && [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Build and deployment successful!"
          echo "Commit: ${{ github.sha }}"
          echo "Message: ${{ github.event.head_commit.message }}"
          echo "Author: ${{ github.event.head_commit.author.name }}"
        else
          echo "❌ Build or deployment failed!"
          echo "Build result: ${{ needs.build-and-test.result }}"
          echo "Deploy result: ${{ needs.deploy-production.result }}"
        fi